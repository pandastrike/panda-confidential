"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _index = require("../../../src/index");

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var asymmetric;

asymmetric = async function () {
  var A, B, C, EncryptionKeyPair, Envelope, Plaintext, PrivateKey, PublicKey, SharedKey, decrypt, encrypt, envelope, key1, key2, key3, message, outPlaintext, plaintext, privateKey, publicKey, serialized;
  ({
    encrypt,
    decrypt,
    EncryptionKeyPair,
    Plaintext,
    Envelope,
    PrivateKey,
    PublicKey,
    SharedKey
  } = (0, _index.confidential)()); // Test Key Pair Generation

  A = ({
    privateKey,
    publicKey
  } = await EncryptionKeyPair.create());
  (0, _assert.default)(PrivateKey.isType(privateKey), "bad private key");
  (0, _assert.default)(PublicKey.isType(publicKey), "bad public key");
  (0, _assert.default)(privateKey.key.length === _tweetnacl.default.box.secretKeyLength, "private key is improper length");
  (0, _assert.default)(publicKey.key.length === _tweetnacl.default.box.publicKeyLength, "public key is improper length"); // Test Encrypt - Decrypt Cycle

  B = await EncryptionKeyPair.create(); // Person A encrypts the message for person B.

  message = "Hello World!";
  plaintext = Plaintext.from("utf8", message);
  (0, _assert.default)(Plaintext.isType(plaintext), "bad plaintext");
  key1 = SharedKey.create(A.privateKey, B.publicKey);
  (0, _assert.default)(SharedKey.isType(key1), "bad shared key");
  (0, _assert.default)(key1.key.length === _tweetnacl.default.box.sharedKeyLength, "bad shared key");
  envelope = await encrypt(key1, plaintext);
  (0, _assert.default)(Envelope.isType(envelope), "bad envelope");
  serialized = envelope.to("base64"); // Person B gets the envelope and decrypts the message with counterpart.

  envelope = Envelope.from("base64", serialized);
  key2 = SharedKey.create(B.privateKey, A.publicKey);

  _assert.default.equal(key1.to("base64"), key2.to("base64"), "shared keys must match");

  outPlaintext = decrypt(key2, envelope);
  (0, _assert.default)(Plaintext.isType(outPlaintext), "bad plaintext");

  _assert.default.equal(outPlaintext.to("utf8"), message, "failed to decrypt"); // Negative test


  C = await EncryptionKeyPair.create();
  key3 = SharedKey.create(A.publicKey, C.privateKey);
  outPlaintext = decrypt(key3, envelope);
  return (0, _assert.default)(outPlaintext.plaintext === null, "decrypt negative test failure");
};

var _default = asymmetric;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9SZXBvc2l0b3JpZXMvcGFuZGEtY29uZmlkZW50aWFsL3Rlc3QvdGVzdHMvcmVndWxhci9hc3ltbWV0cmljLWVuY3J5cHRpb24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUhBLElBQUEsVUFBQTs7QUFLQSxVQUFBLEdBQWEsa0JBQUE7QUFDWCxNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLGlCQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUE7QUFBQSxHQUFBO0FBQUEsSUFBQSxPQUFBO0FBQUEsSUFBQSxPQUFBO0FBQUEsSUFBQSxpQkFBQTtBQUFBLElBQUEsU0FBQTtBQUFBLElBQUEsUUFBQTtBQUFBLElBQUEsVUFBQTtBQUFBLElBQUEsU0FBQTtBQUFBLElBQUE7QUFBQSxNQUFBLDBCQUFBLEVBRFcsQzs7QUFJWCxFQUFBLENBQUEsSUFBSTtBQUFBLElBQUEsVUFBQTtBQUFBLElBQUE7QUFBQSxNQUEwQixNQUFNLGlCQUFpQixDQUFqRCxNQUFnQyxFQUFwQyxDQUFBO0FBQ0EsdUJBQVEsVUFBVSxDQUFWLE1BQUEsQ0FBUixVQUFRLENBQVIsRUFBQSxpQkFBQTtBQUNBLHVCQUFRLFNBQVMsQ0FBVCxNQUFBLENBQVIsU0FBUSxDQUFSLEVBQUEsZ0JBQUE7QUFDQSx1QkFBTyxVQUFVLENBQUMsR0FBWCxDQUFBLE1BQUEsS0FBeUIsbUJBQUssR0FBTCxDQUFoQyxlQUFBLEVBQUEsZ0NBQUE7QUFFQSx1QkFBTyxTQUFTLENBQUMsR0FBVixDQUFBLE1BQUEsS0FBd0IsbUJBQUssR0FBTCxDQUEvQixlQUFBLEVBUkEsK0JBUUEsRUFUVyxDOztBQWFYLEVBQUEsQ0FBQSxHQUFJLE1BQU0saUJBQWlCLENBWjNCLE1BWVUsRUFBVixDQWJXLEM7O0FBZ0JYLEVBQUEsT0FBQSxHQUFVLGNBQVY7QUFDQSxFQUFBLFNBQUEsR0FBWSxTQUFTLENBQVQsSUFBQSxDQUFBLE1BQUEsRUFBQSxPQUFBLENBQVo7QUFDQSx1QkFBUSxTQUFTLENBQVQsTUFBQSxDQUFSLFNBQVEsQ0FBUixFQUFBLGVBQUE7QUFFQSxFQUFBLElBQUEsR0FBTyxTQUFTLENBQVQsTUFBQSxDQUFpQixDQUFDLENBQWxCLFVBQUEsRUFBK0IsQ0FBQyxDQUFoQyxTQUFBLENBQVA7QUFDQSx1QkFBUSxTQUFTLENBQVQsTUFBQSxDQUFSLElBQVEsQ0FBUixFQUFBLGdCQUFBO0FBQ0EsdUJBQU8sSUFBSSxDQUFDLEdBQUwsQ0FBQSxNQUFBLEtBQW1CLG1CQUFLLEdBQUwsQ0FBMUIsZUFBQSxFQUFBLGdCQUFBO0FBRUEsRUFBQSxRQUFBLEdBQVcsTUFBTSxPQUFBLENBQUEsSUFBQSxFQUFOLFNBQU0sQ0FBakI7QUFDQSx1QkFBUSxRQUFRLENBQVIsTUFBQSxDQUFSLFFBQVEsQ0FBUixFQUFBLGNBQUE7QUFDQSxFQUFBLFVBQUEsR0FBYSxRQUFRLENBQVIsRUFBQSxDQXpCYixRQXlCYSxDQUFiLENBMUJXLEM7O0FBNkJYLEVBQUEsUUFBQSxHQUFXLFFBQVEsQ0FBUixJQUFBLENBQUEsUUFBQSxFQUFBLFVBQUEsQ0FBWDtBQUVBLEVBQUEsSUFBQSxHQUFPLFNBQVMsQ0FBVCxNQUFBLENBQWlCLENBQUMsQ0FBbEIsVUFBQSxFQUErQixDQUFDLENBQWhDLFNBQUEsQ0FBUDs7QUFDQSxrQkFBQSxLQUFBLENBQWMsSUFBSSxDQUFKLEVBQUEsQ0FBZCxRQUFjLENBQWQsRUFBa0MsSUFBSSxDQUFKLEVBQUEsQ0FBbEMsUUFBa0MsQ0FBbEMsRUFBQSx3QkFBQTs7QUFFQSxFQUFBLFlBQUEsR0FBZSxPQUFBLENBQUEsSUFBQSxFQUFBLFFBQUEsQ0FBZjtBQUNBLHVCQUFRLFNBQVMsQ0FBVCxNQUFBLENBQVIsWUFBUSxDQUFSLEVBQUEsZUFBQTs7QUFFQSxrQkFBQSxLQUFBLENBQWMsWUFBWSxDQUFaLEVBQUEsQ0FBZCxNQUFjLENBQWQsRUFBQSxPQUFBLEVBcENBLG1CQW9DQSxFQXJDVyxDOzs7QUF3Q1gsRUFBQSxDQUFBLEdBQUksTUFBTSxpQkFBaUIsQ0FBdkIsTUFBTSxFQUFWO0FBQ0EsRUFBQSxJQUFBLEdBQU8sU0FBUyxDQUFULE1BQUEsQ0FBaUIsQ0FBQyxDQUFsQixTQUFBLEVBQThCLENBQUMsQ0FBL0IsVUFBQSxDQUFQO0FBQ0EsRUFBQSxZQUFBLEdBQWUsT0FBQSxDQUFBLElBQUEsRUFBQSxRQUFBLENBQWY7U0FDQSxxQkFBTyxZQUFZLENBQVosU0FBQSxLQUFQLElBQUEsRUFBQSwrQkFBQSxDO0FBM0NXLENBQWI7O2VBNkNlLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIlxuaW1wb3J0IHt0ZXN0LCBwcmludH0gZnJvbSBcImFtZW5cIlxuaW1wb3J0IHtjb25maWRlbnRpYWx9IGZyb20gXCIuLi8uLi8uLi9zcmMvaW5kZXhcIlxuaW1wb3J0IG5hY2wgZnJvbSBcInR3ZWV0bmFjbFwiXG5cbmFzeW1tZXRyaWMgPSAtPlxuICB7ZW5jcnlwdCwgZGVjcnlwdCwgRW5jcnlwdGlvbktleVBhaXIsIFBsYWludGV4dCwgRW52ZWxvcGUsIFByaXZhdGVLZXksIFB1YmxpY0tleSwgU2hhcmVkS2V5fSA9IGNvbmZpZGVudGlhbCgpXG5cbiAgIyBUZXN0IEtleSBQYWlyIEdlbmVyYXRpb25cbiAgQSA9IHtwcml2YXRlS2V5LCBwdWJsaWNLZXl9ID0gYXdhaXQgRW5jcnlwdGlvbktleVBhaXIuY3JlYXRlKClcbiAgYXNzZXJ0IChQcml2YXRlS2V5LmlzVHlwZSBwcml2YXRlS2V5KSwgXCJiYWQgcHJpdmF0ZSBrZXlcIlxuICBhc3NlcnQgKFB1YmxpY0tleS5pc1R5cGUgcHVibGljS2V5KSwgXCJiYWQgcHVibGljIGtleVwiXG4gIGFzc2VydCBwcml2YXRlS2V5LmtleS5sZW5ndGggPT0gbmFjbC5ib3guc2VjcmV0S2V5TGVuZ3RoLFxuICAgIFwicHJpdmF0ZSBrZXkgaXMgaW1wcm9wZXIgbGVuZ3RoXCJcbiAgYXNzZXJ0IHB1YmxpY0tleS5rZXkubGVuZ3RoID09IG5hY2wuYm94LnB1YmxpY0tleUxlbmd0aCxcbiAgICBcInB1YmxpYyBrZXkgaXMgaW1wcm9wZXIgbGVuZ3RoXCJcblxuICAjIFRlc3QgRW5jcnlwdCAtIERlY3J5cHQgQ3ljbGVcbiAgQiA9IGF3YWl0IEVuY3J5cHRpb25LZXlQYWlyLmNyZWF0ZSgpXG5cbiAgIyBQZXJzb24gQSBlbmNyeXB0cyB0aGUgbWVzc2FnZSBmb3IgcGVyc29uIEIuXG4gIG1lc3NhZ2UgPSBcIkhlbGxvIFdvcmxkIVwiXG4gIHBsYWludGV4dCA9IFBsYWludGV4dC5mcm9tIFwidXRmOFwiLCBtZXNzYWdlXG4gIGFzc2VydCAoUGxhaW50ZXh0LmlzVHlwZSBwbGFpbnRleHQpLCBcImJhZCBwbGFpbnRleHRcIlxuXG4gIGtleTEgPSBTaGFyZWRLZXkuY3JlYXRlIEEucHJpdmF0ZUtleSwgQi5wdWJsaWNLZXlcbiAgYXNzZXJ0IChTaGFyZWRLZXkuaXNUeXBlIGtleTEpLCBcImJhZCBzaGFyZWQga2V5XCJcbiAgYXNzZXJ0IGtleTEua2V5Lmxlbmd0aCA9PSBuYWNsLmJveC5zaGFyZWRLZXlMZW5ndGgsIFwiYmFkIHNoYXJlZCBrZXlcIlxuXG4gIGVudmVsb3BlID0gYXdhaXQgZW5jcnlwdCBrZXkxLCBwbGFpbnRleHRcbiAgYXNzZXJ0IChFbnZlbG9wZS5pc1R5cGUgZW52ZWxvcGUpLCBcImJhZCBlbnZlbG9wZVwiXG4gIHNlcmlhbGl6ZWQgPSBlbnZlbG9wZS50byBcImJhc2U2NFwiXG5cbiAgIyBQZXJzb24gQiBnZXRzIHRoZSBlbnZlbG9wZSBhbmQgZGVjcnlwdHMgdGhlIG1lc3NhZ2Ugd2l0aCBjb3VudGVycGFydC5cbiAgZW52ZWxvcGUgPSBFbnZlbG9wZS5mcm9tIFwiYmFzZTY0XCIsIHNlcmlhbGl6ZWRcblxuICBrZXkyID0gU2hhcmVkS2V5LmNyZWF0ZSBCLnByaXZhdGVLZXksIEEucHVibGljS2V5XG4gIGFzc2VydC5lcXVhbCAoa2V5MS50byBcImJhc2U2NFwiKSwgKGtleTIudG8gXCJiYXNlNjRcIiksIFwic2hhcmVkIGtleXMgbXVzdCBtYXRjaFwiXG5cbiAgb3V0UGxhaW50ZXh0ID0gZGVjcnlwdCBrZXkyLCBlbnZlbG9wZVxuICBhc3NlcnQgKFBsYWludGV4dC5pc1R5cGUgb3V0UGxhaW50ZXh0KSwgXCJiYWQgcGxhaW50ZXh0XCJcblxuICBhc3NlcnQuZXF1YWwgKG91dFBsYWludGV4dC50byBcInV0ZjhcIiksIG1lc3NhZ2UsIFwiZmFpbGVkIHRvIGRlY3J5cHRcIlxuXG4gICMgTmVnYXRpdmUgdGVzdFxuICBDID0gYXdhaXQgRW5jcnlwdGlvbktleVBhaXIuY3JlYXRlKClcbiAga2V5MyA9IFNoYXJlZEtleS5jcmVhdGUgQS5wdWJsaWNLZXksIEMucHJpdmF0ZUtleVxuICBvdXRQbGFpbnRleHQgPSBkZWNyeXB0IGtleTMsIGVudmVsb3BlXG4gIGFzc2VydCBvdXRQbGFpbnRleHQucGxhaW50ZXh0ID09IG51bGwsIFwiZGVjcnlwdCBuZWdhdGl2ZSB0ZXN0IGZhaWx1cmVcIlxuXG5leHBvcnQgZGVmYXVsdCBhc3ltbWV0cmljXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/david/Repositories/panda-confidential/test/tests/regular/asymmetric-encryption.coffee