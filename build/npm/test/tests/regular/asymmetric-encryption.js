"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _index = require("../../../src/index");

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var asymmetric;

asymmetric = async function () {
  var A, B, C, EncryptionKeyPair, Envelope, Message, PrivateKey, PublicKey, SharedKey, decrypt, encrypt, envelope, key1, key2, key3, message, outMessage, privateKey, publicKey, serialized, string;
  ({
    encrypt,
    decrypt,
    EncryptionKeyPair,
    Message,
    Envelope,
    PrivateKey,
    PublicKey,
    SharedKey
  } = (0, _index.confidential)()); // Test Key Pair Generation

  A = ({
    privateKey,
    publicKey
  } = await EncryptionKeyPair.create());
  (0, _assert.default)(PrivateKey.isType(privateKey), "bad private key");
  (0, _assert.default)(PublicKey.isType(publicKey), "bad public key");
  (0, _assert.default)(privateKey.key.length === _tweetnacl.default.box.secretKeyLength, "private key is improper length");
  (0, _assert.default)(publicKey.key.length === _tweetnacl.default.box.publicKeyLength, "public key is improper length"); // Test Encrypt - Decrypt Cycle

  B = await EncryptionKeyPair.create(); // Person A encrypts the message for person B.

  string = "Hello World!";
  message = Message.from("utf8", string);
  (0, _assert.default)(Message.isType(message), "bad message");
  key1 = SharedKey.create(A.privateKey, B.publicKey);
  (0, _assert.default)(SharedKey.isType(key1), "bad shared key");
  (0, _assert.default)(key1.key.length === _tweetnacl.default.box.sharedKeyLength, "bad shared key");
  envelope = await encrypt(key1, message);
  (0, _assert.default)(Envelope.isType(envelope), "bad envelope");
  serialized = envelope.to("base64"); // Person B gets the envelope and decrypts the message with counterpart.

  envelope = Envelope.from("base64", serialized);
  key2 = SharedKey.create(B.privateKey, A.publicKey);

  _assert.default.equal(key1.to("base64"), key2.to("base64"), "shared keys must match");

  outMessage = decrypt(key2, envelope);
  (0, _assert.default)(Message.isType(outMessage), "bad message");

  _assert.default.equal(outMessage.to("utf8"), string, "failed to decrypt");

  try {
    // Negative test
    C = await EncryptionKeyPair.create();
    key3 = SharedKey.create(A.publicKey, C.privateKey);
    decrypt(key3, envelope);
    return _assert.default.fail("This decrypt shoudl fail");
  } catch (error) {}
};

var _default = asymmetric;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1jb25maWRlbnRpYWwvdGVzdC90ZXN0cy9yZWd1bGFyL2FzeW1tZXRyaWMtZW5jcnlwdGlvbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBSEEsSUFBQSxVQUFBOztBQUtBLFVBQUEsR0FBYSxrQkFBQTtBQUNYLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsaUJBQUEsRUFBQSxRQUFBLEVBQUEsT0FBQSxFQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsTUFBQTtBQUFBLEdBQUE7QUFBQSxJQUFBLE9BQUE7QUFBQSxJQUFBLE9BQUE7QUFBQSxJQUFBLGlCQUFBO0FBQUEsSUFBQSxPQUFBO0FBQUEsSUFBQSxRQUFBO0FBQUEsSUFBQSxVQUFBO0FBQUEsSUFBQSxTQUFBO0FBQUEsSUFBQTtBQUFBLE1BQUEsMEJBQUEsRUFEVyxDOztBQUlYLEVBQUEsQ0FBQSxJQUFJO0FBQUEsSUFBQSxVQUFBO0FBQUEsSUFBQTtBQUFBLE1BQTBCLE1BQU0saUJBQWlCLENBQWpELE1BQWdDLEVBQXBDLENBQUE7QUFDQSx1QkFBUSxVQUFVLENBQVYsTUFBQSxDQUFSLFVBQVEsQ0FBUixFQUFBLGlCQUFBO0FBQ0EsdUJBQVEsU0FBUyxDQUFULE1BQUEsQ0FBUixTQUFRLENBQVIsRUFBQSxnQkFBQTtBQUNBLHVCQUFPLFVBQVUsQ0FBQyxHQUFYLENBQUEsTUFBQSxLQUF5QixtQkFBSyxHQUFMLENBQWhDLGVBQUEsRUFBQSxnQ0FBQTtBQUVBLHVCQUFPLFNBQVMsQ0FBQyxHQUFWLENBQUEsTUFBQSxLQUF3QixtQkFBSyxHQUFMLENBQS9CLGVBQUEsRUFSQSwrQkFRQSxFQVRXLEM7O0FBYVgsRUFBQSxDQUFBLEdBQUksTUFBTSxpQkFBaUIsQ0FaM0IsTUFZVSxFQUFWLENBYlcsQzs7QUFnQlgsRUFBQSxNQUFBLEdBQVMsY0FBVDtBQUNBLEVBQUEsT0FBQSxHQUFVLE9BQU8sQ0FBUCxJQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBVjtBQUNBLHVCQUFRLE9BQU8sQ0FBUCxNQUFBLENBQVIsT0FBUSxDQUFSLEVBQUEsYUFBQTtBQUVBLEVBQUEsSUFBQSxHQUFPLFNBQVMsQ0FBVCxNQUFBLENBQWlCLENBQUMsQ0FBbEIsVUFBQSxFQUErQixDQUFDLENBQWhDLFNBQUEsQ0FBUDtBQUNBLHVCQUFRLFNBQVMsQ0FBVCxNQUFBLENBQVIsSUFBUSxDQUFSLEVBQUEsZ0JBQUE7QUFDQSx1QkFBTyxJQUFJLENBQUMsR0FBTCxDQUFBLE1BQUEsS0FBbUIsbUJBQUssR0FBTCxDQUExQixlQUFBLEVBQUEsZ0JBQUE7QUFFQSxFQUFBLFFBQUEsR0FBVyxNQUFNLE9BQUEsQ0FBQSxJQUFBLEVBQU4sT0FBTSxDQUFqQjtBQUNBLHVCQUFRLFFBQVEsQ0FBUixNQUFBLENBQVIsUUFBUSxDQUFSLEVBQUEsY0FBQTtBQUNBLEVBQUEsVUFBQSxHQUFhLFFBQVEsQ0FBUixFQUFBLENBekJiLFFBeUJhLENBQWIsQ0ExQlcsQzs7QUE2QlgsRUFBQSxRQUFBLEdBQVcsUUFBUSxDQUFSLElBQUEsQ0FBQSxRQUFBLEVBQUEsVUFBQSxDQUFYO0FBRUEsRUFBQSxJQUFBLEdBQU8sU0FBUyxDQUFULE1BQUEsQ0FBaUIsQ0FBQyxDQUFsQixVQUFBLEVBQStCLENBQUMsQ0FBaEMsU0FBQSxDQUFQOztBQUNBLGtCQUFBLEtBQUEsQ0FBYyxJQUFJLENBQUosRUFBQSxDQUFkLFFBQWMsQ0FBZCxFQUFrQyxJQUFJLENBQUosRUFBQSxDQUFsQyxRQUFrQyxDQUFsQyxFQUFBLHdCQUFBOztBQUVBLEVBQUEsVUFBQSxHQUFhLE9BQUEsQ0FBQSxJQUFBLEVBQUEsUUFBQSxDQUFiO0FBQ0EsdUJBQVEsT0FBTyxDQUFQLE1BQUEsQ0FBUixVQUFRLENBQVIsRUFBQSxhQUFBOztBQUVBLGtCQUFBLEtBQUEsQ0FBYyxVQUFVLENBQVYsRUFBQSxDQUFkLE1BQWMsQ0FBZCxFQUFBLE1BQUEsRUFBQSxtQkFBQTs7QUFHQSxNQUFBOztBQUNFLElBQUEsQ0FBQSxHQUFJLE1BQU0saUJBQWlCLENBQXZCLE1BQU0sRUFBVjtBQUNBLElBQUEsSUFBQSxHQUFPLFNBQVMsQ0FBVCxNQUFBLENBQWlCLENBQUMsQ0FBbEIsU0FBQSxFQUE4QixDQUFDLENBQS9CLFVBQUEsQ0FBUDtBQUNBLElBQUEsT0FBQSxDQUFBLElBQUEsRUFBQSxRQUFBLENBQUE7V0FDQSxnQkFBQSxJQUFBLENBSkYsMEJBSUUsQztBQUpGLEdBQUEsQ0FBQSxPQUFBLEtBQUEsRUFBQSxDO0FBeENXLENBQWI7O2VBK0NlLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIlxuaW1wb3J0IHt0ZXN0LCBwcmludH0gZnJvbSBcImFtZW5cIlxuaW1wb3J0IHtjb25maWRlbnRpYWx9IGZyb20gXCIuLi8uLi8uLi9zcmMvaW5kZXhcIlxuaW1wb3J0IG5hY2wgZnJvbSBcInR3ZWV0bmFjbFwiXG5cbmFzeW1tZXRyaWMgPSAtPlxuICB7ZW5jcnlwdCwgZGVjcnlwdCwgRW5jcnlwdGlvbktleVBhaXIsIE1lc3NhZ2UsIEVudmVsb3BlLCBQcml2YXRlS2V5LCBQdWJsaWNLZXksIFNoYXJlZEtleX0gPSBjb25maWRlbnRpYWwoKVxuXG4gICMgVGVzdCBLZXkgUGFpciBHZW5lcmF0aW9uXG4gIEEgPSB7cHJpdmF0ZUtleSwgcHVibGljS2V5fSA9IGF3YWl0IEVuY3J5cHRpb25LZXlQYWlyLmNyZWF0ZSgpXG4gIGFzc2VydCAoUHJpdmF0ZUtleS5pc1R5cGUgcHJpdmF0ZUtleSksIFwiYmFkIHByaXZhdGUga2V5XCJcbiAgYXNzZXJ0IChQdWJsaWNLZXkuaXNUeXBlIHB1YmxpY0tleSksIFwiYmFkIHB1YmxpYyBrZXlcIlxuICBhc3NlcnQgcHJpdmF0ZUtleS5rZXkubGVuZ3RoID09IG5hY2wuYm94LnNlY3JldEtleUxlbmd0aCxcbiAgICBcInByaXZhdGUga2V5IGlzIGltcHJvcGVyIGxlbmd0aFwiXG4gIGFzc2VydCBwdWJsaWNLZXkua2V5Lmxlbmd0aCA9PSBuYWNsLmJveC5wdWJsaWNLZXlMZW5ndGgsXG4gICAgXCJwdWJsaWMga2V5IGlzIGltcHJvcGVyIGxlbmd0aFwiXG5cbiAgIyBUZXN0IEVuY3J5cHQgLSBEZWNyeXB0IEN5Y2xlXG4gIEIgPSBhd2FpdCBFbmNyeXB0aW9uS2V5UGFpci5jcmVhdGUoKVxuXG4gICMgUGVyc29uIEEgZW5jcnlwdHMgdGhlIG1lc3NhZ2UgZm9yIHBlcnNvbiBCLlxuICBzdHJpbmcgPSBcIkhlbGxvIFdvcmxkIVwiXG4gIG1lc3NhZ2UgPSBNZXNzYWdlLmZyb20gXCJ1dGY4XCIsIHN0cmluZ1xuICBhc3NlcnQgKE1lc3NhZ2UuaXNUeXBlIG1lc3NhZ2UpLCBcImJhZCBtZXNzYWdlXCJcblxuICBrZXkxID0gU2hhcmVkS2V5LmNyZWF0ZSBBLnByaXZhdGVLZXksIEIucHVibGljS2V5XG4gIGFzc2VydCAoU2hhcmVkS2V5LmlzVHlwZSBrZXkxKSwgXCJiYWQgc2hhcmVkIGtleVwiXG4gIGFzc2VydCBrZXkxLmtleS5sZW5ndGggPT0gbmFjbC5ib3guc2hhcmVkS2V5TGVuZ3RoLCBcImJhZCBzaGFyZWQga2V5XCJcblxuICBlbnZlbG9wZSA9IGF3YWl0IGVuY3J5cHQga2V5MSwgbWVzc2FnZVxuICBhc3NlcnQgKEVudmVsb3BlLmlzVHlwZSBlbnZlbG9wZSksIFwiYmFkIGVudmVsb3BlXCJcbiAgc2VyaWFsaXplZCA9IGVudmVsb3BlLnRvIFwiYmFzZTY0XCJcblxuICAjIFBlcnNvbiBCIGdldHMgdGhlIGVudmVsb3BlIGFuZCBkZWNyeXB0cyB0aGUgbWVzc2FnZSB3aXRoIGNvdW50ZXJwYXJ0LlxuICBlbnZlbG9wZSA9IEVudmVsb3BlLmZyb20gXCJiYXNlNjRcIiwgc2VyaWFsaXplZFxuXG4gIGtleTIgPSBTaGFyZWRLZXkuY3JlYXRlIEIucHJpdmF0ZUtleSwgQS5wdWJsaWNLZXlcbiAgYXNzZXJ0LmVxdWFsIChrZXkxLnRvIFwiYmFzZTY0XCIpLCAoa2V5Mi50byBcImJhc2U2NFwiKSwgXCJzaGFyZWQga2V5cyBtdXN0IG1hdGNoXCJcblxuICBvdXRNZXNzYWdlID0gZGVjcnlwdCBrZXkyLCBlbnZlbG9wZVxuICBhc3NlcnQgKE1lc3NhZ2UuaXNUeXBlIG91dE1lc3NhZ2UpLCBcImJhZCBtZXNzYWdlXCJcblxuICBhc3NlcnQuZXF1YWwgKG91dE1lc3NhZ2UudG8gXCJ1dGY4XCIpLCBzdHJpbmcsIFwiZmFpbGVkIHRvIGRlY3J5cHRcIlxuXG4gICMgTmVnYXRpdmUgdGVzdFxuICB0cnlcbiAgICBDID0gYXdhaXQgRW5jcnlwdGlvbktleVBhaXIuY3JlYXRlKClcbiAgICBrZXkzID0gU2hhcmVkS2V5LmNyZWF0ZSBBLnB1YmxpY0tleSwgQy5wcml2YXRlS2V5XG4gICAgZGVjcnlwdCBrZXkzLCBlbnZlbG9wZVxuICAgIGFzc2VydC5mYWlsIFwiVGhpcyBkZWNyeXB0IHNob3VkbCBmYWlsXCJcbiAgY2F0Y2hcblxuZXhwb3J0IGRlZmF1bHQgYXN5bW1ldHJpY1xuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/david/repos/panda-confidential/test/tests/regular/asymmetric-encryption.coffee