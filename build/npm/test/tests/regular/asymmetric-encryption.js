"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _index = require("../../../src/index");

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var asymmetric;

asymmetric = async function () {
  var A, B, C, EncryptionKeyPair, Envelope, Plaintext, PrivateKey, PublicKey, SharedKey, decrypt, encrypt, envelope, key1, key2, key3, message, outPlaintext, plaintext, privateKey, publicKey, serialized;
  ({
    encrypt,
    decrypt,
    EncryptionKeyPair,
    Plaintext,
    Envelope,
    PrivateKey,
    PublicKey,
    SharedKey
  } = (0, _index.confidential)()); // Test Key Pair Generation

  A = ({
    privateKey,
    publicKey
  } = await EncryptionKeyPair.create());
  (0, _assert.default)(PrivateKey.isType(privateKey), "bad private key");
  (0, _assert.default)(PublicKey.isType(publicKey), "bad public key");
  (0, _assert.default)(privateKey.key.length === _tweetnacl.default.box.secretKeyLength, "private key is improper length");
  (0, _assert.default)(publicKey.key.length === _tweetnacl.default.box.publicKeyLength, "public key is improper length"); // Test Encrypt - Decrypt Cycle

  B = await EncryptionKeyPair.create(); // Person A encrypts the message for person B.

  message = "Hello World!";
  plaintext = Plaintext.from("utf8", message);
  (0, _assert.default)(Plaintext.isType(plaintext), "bad plaintext");
  key1 = SharedKey.create(A.privateKey, B.publicKey);
  (0, _assert.default)(SharedKey.isType(key1), "bad shared key");
  (0, _assert.default)(key1.key.length === _tweetnacl.default.box.sharedKeyLength, "bad shared key");
  envelope = await encrypt(key1, plaintext);
  (0, _assert.default)(Envelope.isType(envelope), "bad envelope");
  serialized = envelope.to("base64"); // Person B gets the envelope and decrypts the message with counterpart.

  envelope = Envelope.from("base64", serialized);
  key2 = SharedKey.create(B.privateKey, A.publicKey);

  _assert.default.equal(key1.to("base64"), key2.to("base64"), "shared keys must match");

  outPlaintext = decrypt(key2, envelope);
  (0, _assert.default)(Plaintext.isType(outPlaintext), "bad plaintext");

  _assert.default.equal(outPlaintext.to("utf8"), message, "failed to decrypt");

  try {
    // Negative test
    C = await EncryptionKeyPair.create();
    key3 = SharedKey.create(A.publicKey, C.privateKey);
    decrypt(key3, envelope);
    return _assert.default.fail("This decrypt shoudl fail");
  } catch (error) {}
};

var _default = asymmetric;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9SZXBvc2l0b3JpZXMvcGFuZGEtY29uZmlkZW50aWFsL3Rlc3QvdGVzdHMvcmVndWxhci9hc3ltbWV0cmljLWVuY3J5cHRpb24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUhBLElBQUEsVUFBQTs7QUFLQSxVQUFBLEdBQWEsa0JBQUE7QUFDWCxNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLGlCQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUE7QUFBQSxHQUFBO0FBQUEsSUFBQSxPQUFBO0FBQUEsSUFBQSxPQUFBO0FBQUEsSUFBQSxpQkFBQTtBQUFBLElBQUEsU0FBQTtBQUFBLElBQUEsUUFBQTtBQUFBLElBQUEsVUFBQTtBQUFBLElBQUEsU0FBQTtBQUFBLElBQUE7QUFBQSxNQUFBLDBCQUFBLEVBRFcsQzs7QUFJWCxFQUFBLENBQUEsSUFBSTtBQUFBLElBQUEsVUFBQTtBQUFBLElBQUE7QUFBQSxNQUEwQixNQUFNLGlCQUFpQixDQUFqRCxNQUFnQyxFQUFwQyxDQUFBO0FBQ0EsdUJBQVEsVUFBVSxDQUFWLE1BQUEsQ0FBUixVQUFRLENBQVIsRUFBQSxpQkFBQTtBQUNBLHVCQUFRLFNBQVMsQ0FBVCxNQUFBLENBQVIsU0FBUSxDQUFSLEVBQUEsZ0JBQUE7QUFDQSx1QkFBTyxVQUFVLENBQUMsR0FBWCxDQUFBLE1BQUEsS0FBeUIsbUJBQUssR0FBTCxDQUFoQyxlQUFBLEVBQUEsZ0NBQUE7QUFFQSx1QkFBTyxTQUFTLENBQUMsR0FBVixDQUFBLE1BQUEsS0FBd0IsbUJBQUssR0FBTCxDQUEvQixlQUFBLEVBUkEsK0JBUUEsRUFUVyxDOztBQWFYLEVBQUEsQ0FBQSxHQUFJLE1BQU0saUJBQWlCLENBWjNCLE1BWVUsRUFBVixDQWJXLEM7O0FBZ0JYLEVBQUEsT0FBQSxHQUFVLGNBQVY7QUFDQSxFQUFBLFNBQUEsR0FBWSxTQUFTLENBQVQsSUFBQSxDQUFBLE1BQUEsRUFBQSxPQUFBLENBQVo7QUFDQSx1QkFBUSxTQUFTLENBQVQsTUFBQSxDQUFSLFNBQVEsQ0FBUixFQUFBLGVBQUE7QUFFQSxFQUFBLElBQUEsR0FBTyxTQUFTLENBQVQsTUFBQSxDQUFpQixDQUFDLENBQWxCLFVBQUEsRUFBK0IsQ0FBQyxDQUFoQyxTQUFBLENBQVA7QUFDQSx1QkFBUSxTQUFTLENBQVQsTUFBQSxDQUFSLElBQVEsQ0FBUixFQUFBLGdCQUFBO0FBQ0EsdUJBQU8sSUFBSSxDQUFDLEdBQUwsQ0FBQSxNQUFBLEtBQW1CLG1CQUFLLEdBQUwsQ0FBMUIsZUFBQSxFQUFBLGdCQUFBO0FBRUEsRUFBQSxRQUFBLEdBQVcsTUFBTSxPQUFBLENBQUEsSUFBQSxFQUFOLFNBQU0sQ0FBakI7QUFDQSx1QkFBUSxRQUFRLENBQVIsTUFBQSxDQUFSLFFBQVEsQ0FBUixFQUFBLGNBQUE7QUFDQSxFQUFBLFVBQUEsR0FBYSxRQUFRLENBQVIsRUFBQSxDQXpCYixRQXlCYSxDQUFiLENBMUJXLEM7O0FBNkJYLEVBQUEsUUFBQSxHQUFXLFFBQVEsQ0FBUixJQUFBLENBQUEsUUFBQSxFQUFBLFVBQUEsQ0FBWDtBQUVBLEVBQUEsSUFBQSxHQUFPLFNBQVMsQ0FBVCxNQUFBLENBQWlCLENBQUMsQ0FBbEIsVUFBQSxFQUErQixDQUFDLENBQWhDLFNBQUEsQ0FBUDs7QUFDQSxrQkFBQSxLQUFBLENBQWMsSUFBSSxDQUFKLEVBQUEsQ0FBZCxRQUFjLENBQWQsRUFBa0MsSUFBSSxDQUFKLEVBQUEsQ0FBbEMsUUFBa0MsQ0FBbEMsRUFBQSx3QkFBQTs7QUFFQSxFQUFBLFlBQUEsR0FBZSxPQUFBLENBQUEsSUFBQSxFQUFBLFFBQUEsQ0FBZjtBQUNBLHVCQUFRLFNBQVMsQ0FBVCxNQUFBLENBQVIsWUFBUSxDQUFSLEVBQUEsZUFBQTs7QUFFQSxrQkFBQSxLQUFBLENBQWMsWUFBWSxDQUFaLEVBQUEsQ0FBZCxNQUFjLENBQWQsRUFBQSxPQUFBLEVBQUEsbUJBQUE7O0FBR0EsTUFBQTs7QUFDRSxJQUFBLENBQUEsR0FBSSxNQUFNLGlCQUFpQixDQUF2QixNQUFNLEVBQVY7QUFDQSxJQUFBLElBQUEsR0FBTyxTQUFTLENBQVQsTUFBQSxDQUFpQixDQUFDLENBQWxCLFNBQUEsRUFBOEIsQ0FBQyxDQUEvQixVQUFBLENBQVA7QUFDQSxJQUFBLE9BQUEsQ0FBQSxJQUFBLEVBQUEsUUFBQSxDQUFBO1dBQ0EsZ0JBQUEsSUFBQSxDQUpGLDBCQUlFLEM7QUFKRixHQUFBLENBQUEsT0FBQSxLQUFBLEVBQUEsQztBQXhDVyxDQUFiOztlQStDZSxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCJcbmltcG9ydCB7dGVzdCwgcHJpbnR9IGZyb20gXCJhbWVuXCJcbmltcG9ydCB7Y29uZmlkZW50aWFsfSBmcm9tIFwiLi4vLi4vLi4vc3JjL2luZGV4XCJcbmltcG9ydCBuYWNsIGZyb20gXCJ0d2VldG5hY2xcIlxuXG5hc3ltbWV0cmljID0gLT5cbiAge2VuY3J5cHQsIGRlY3J5cHQsIEVuY3J5cHRpb25LZXlQYWlyLCBQbGFpbnRleHQsIEVudmVsb3BlLCBQcml2YXRlS2V5LCBQdWJsaWNLZXksIFNoYXJlZEtleX0gPSBjb25maWRlbnRpYWwoKVxuXG4gICMgVGVzdCBLZXkgUGFpciBHZW5lcmF0aW9uXG4gIEEgPSB7cHJpdmF0ZUtleSwgcHVibGljS2V5fSA9IGF3YWl0IEVuY3J5cHRpb25LZXlQYWlyLmNyZWF0ZSgpXG4gIGFzc2VydCAoUHJpdmF0ZUtleS5pc1R5cGUgcHJpdmF0ZUtleSksIFwiYmFkIHByaXZhdGUga2V5XCJcbiAgYXNzZXJ0IChQdWJsaWNLZXkuaXNUeXBlIHB1YmxpY0tleSksIFwiYmFkIHB1YmxpYyBrZXlcIlxuICBhc3NlcnQgcHJpdmF0ZUtleS5rZXkubGVuZ3RoID09IG5hY2wuYm94LnNlY3JldEtleUxlbmd0aCxcbiAgICBcInByaXZhdGUga2V5IGlzIGltcHJvcGVyIGxlbmd0aFwiXG4gIGFzc2VydCBwdWJsaWNLZXkua2V5Lmxlbmd0aCA9PSBuYWNsLmJveC5wdWJsaWNLZXlMZW5ndGgsXG4gICAgXCJwdWJsaWMga2V5IGlzIGltcHJvcGVyIGxlbmd0aFwiXG5cbiAgIyBUZXN0IEVuY3J5cHQgLSBEZWNyeXB0IEN5Y2xlXG4gIEIgPSBhd2FpdCBFbmNyeXB0aW9uS2V5UGFpci5jcmVhdGUoKVxuXG4gICMgUGVyc29uIEEgZW5jcnlwdHMgdGhlIG1lc3NhZ2UgZm9yIHBlcnNvbiBCLlxuICBtZXNzYWdlID0gXCJIZWxsbyBXb3JsZCFcIlxuICBwbGFpbnRleHQgPSBQbGFpbnRleHQuZnJvbSBcInV0ZjhcIiwgbWVzc2FnZVxuICBhc3NlcnQgKFBsYWludGV4dC5pc1R5cGUgcGxhaW50ZXh0KSwgXCJiYWQgcGxhaW50ZXh0XCJcblxuICBrZXkxID0gU2hhcmVkS2V5LmNyZWF0ZSBBLnByaXZhdGVLZXksIEIucHVibGljS2V5XG4gIGFzc2VydCAoU2hhcmVkS2V5LmlzVHlwZSBrZXkxKSwgXCJiYWQgc2hhcmVkIGtleVwiXG4gIGFzc2VydCBrZXkxLmtleS5sZW5ndGggPT0gbmFjbC5ib3guc2hhcmVkS2V5TGVuZ3RoLCBcImJhZCBzaGFyZWQga2V5XCJcblxuICBlbnZlbG9wZSA9IGF3YWl0IGVuY3J5cHQga2V5MSwgcGxhaW50ZXh0XG4gIGFzc2VydCAoRW52ZWxvcGUuaXNUeXBlIGVudmVsb3BlKSwgXCJiYWQgZW52ZWxvcGVcIlxuICBzZXJpYWxpemVkID0gZW52ZWxvcGUudG8gXCJiYXNlNjRcIlxuXG4gICMgUGVyc29uIEIgZ2V0cyB0aGUgZW52ZWxvcGUgYW5kIGRlY3J5cHRzIHRoZSBtZXNzYWdlIHdpdGggY291bnRlcnBhcnQuXG4gIGVudmVsb3BlID0gRW52ZWxvcGUuZnJvbSBcImJhc2U2NFwiLCBzZXJpYWxpemVkXG5cbiAga2V5MiA9IFNoYXJlZEtleS5jcmVhdGUgQi5wcml2YXRlS2V5LCBBLnB1YmxpY0tleVxuICBhc3NlcnQuZXF1YWwgKGtleTEudG8gXCJiYXNlNjRcIiksIChrZXkyLnRvIFwiYmFzZTY0XCIpLCBcInNoYXJlZCBrZXlzIG11c3QgbWF0Y2hcIlxuXG4gIG91dFBsYWludGV4dCA9IGRlY3J5cHQga2V5MiwgZW52ZWxvcGVcbiAgYXNzZXJ0IChQbGFpbnRleHQuaXNUeXBlIG91dFBsYWludGV4dCksIFwiYmFkIHBsYWludGV4dFwiXG5cbiAgYXNzZXJ0LmVxdWFsIChvdXRQbGFpbnRleHQudG8gXCJ1dGY4XCIpLCBtZXNzYWdlLCBcImZhaWxlZCB0byBkZWNyeXB0XCJcblxuICAjIE5lZ2F0aXZlIHRlc3RcbiAgdHJ5XG4gICAgQyA9IGF3YWl0IEVuY3J5cHRpb25LZXlQYWlyLmNyZWF0ZSgpXG4gICAga2V5MyA9IFNoYXJlZEtleS5jcmVhdGUgQS5wdWJsaWNLZXksIEMucHJpdmF0ZUtleVxuICAgIGRlY3J5cHQga2V5MywgZW52ZWxvcGVcbiAgICBhc3NlcnQuZmFpbCBcIlRoaXMgZGVjcnlwdCBzaG91ZGwgZmFpbFwiXG4gIGNhdGNoXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW1tZXRyaWNcbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/david/Repositories/panda-confidential/test/tests/regular/asymmetric-encryption.coffee