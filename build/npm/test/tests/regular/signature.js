"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _index = require("../../../src/index");

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Signature;

Signature = async function () {
  var A, B, Declaration, Message, PrivateKey, PublicKey, SignatureKeyPair, convert, declaration, message, privateKey, publicKey, serialized, sign, string, verify;
  ({
    sign,
    verify,
    SignatureKeyPair,
    PrivateKey,
    PublicKey,
    Declaration,
    Message,
    convert
  } = (0, _index.confidential)()); // Test Key Pair Generation

  A = ({
    privateKey,
    publicKey
  } = await SignatureKeyPair.create());
  (0, _assert.default)(PrivateKey.isType(privateKey), "bad private key");
  (0, _assert.default)(PublicKey.isType(publicKey), "bad public key");
  (0, _assert.default)(privateKey.key.length === _tweetnacl.default.sign.secretKeyLength, "private key is improper length");
  (0, _assert.default)(publicKey.key.length === _tweetnacl.default.sign.publicKeyLength, "public key is improper length"); // Test Encrypt - Decrypt Cycle

  B = await SignatureKeyPair.create();
  string = "Hello World!";
  message = Message.from("utf8", string);
  (0, _assert.default)(Message.isType(message), "bad message"); //# Case 1
  //###############################
  // Person A signs a message.

  declaration = sign(A.privateKey, A.publicKey, message);
  (0, _assert.default)(Declaration.isType(declaration), "bad declaration");

  _assert.default.equal(declaration.message.to("utf8"), string, "bad declaration: message must be intact");

  _assert.default.equal(declaration.signatories[0].to("base64"), A.publicKey.to("base64"), "bad declaration: signatory's public key is incorrect");

  serialized = declaration.to("base64"); // Person B uses A's public key to verify and open the message.

  declaration = Declaration.from("base64", serialized);
  (0, _assert.default)(verify(declaration) === true, "failed to verify"); // Negative test.

  declaration.signatories = [B.publicKey];
  (0, _assert.default)(verify(declaration) === false, "signature negative test failure"); //# Case 2
  //###############################
  // Person A and B sign a message with key pairs.

  declaration = sign(A, message);
  sign(B, declaration);
  (0, _assert.default)(Declaration.isType(declaration), "bad declaration");

  _assert.default.equal(declaration.message.to("utf8"), string, "bad declaration: message must be intact");

  _assert.default.equal(declaration.signatories[0].to("base64"), A.publicKey.to("base64"), "bad declaration: signatory A's public key is incorrect");

  _assert.default.equal(declaration.signatories[1].to("base64"), B.publicKey.to("base64"), "bad declaration: signatory B's public key is incorrect");

  serialized = declaration.to("base64"); // Person C verifies the message from both.

  declaration = Declaration.from("base64", serialized);
  return (0, _assert.default)(verify(declaration) === true, "failed to verify");
};

var _default = Signature;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9SZXBvc2l0b3JpZXMvcGFuZGEtY29uZmlkZW50aWFsL3Rlc3QvdGVzdHMvcmVndWxhci9zaWduYXR1cmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUhBLElBQUEsU0FBQTs7QUFLQSxTQUFBLEdBQVksa0JBQUE7QUFDVixNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsV0FBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsU0FBQSxFQUFBLGdCQUFBLEVBQUEsT0FBQSxFQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsVUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBO0FBQUEsR0FBQTtBQUFBLElBQUEsSUFBQTtBQUFBLElBQUEsTUFBQTtBQUFBLElBQUEsZ0JBQUE7QUFBQSxJQUFBLFVBQUE7QUFBQSxJQUFBLFNBQUE7QUFBQSxJQUFBLFdBQUE7QUFBQSxJQUFBLE9BQUE7QUFBQSxJQUFBO0FBQUEsTUFBQSwwQkFBQSxFQURVLEM7O0FBSVYsRUFBQSxDQUFBLElBQUk7QUFBQSxJQUFBLFVBQUE7QUFBQSxJQUFBO0FBQUEsTUFBMEIsTUFBTSxnQkFBZ0IsQ0FBaEQsTUFBZ0MsRUFBcEMsQ0FBQTtBQUNBLHVCQUFRLFVBQVUsQ0FBVixNQUFBLENBQVIsVUFBUSxDQUFSLEVBQUEsaUJBQUE7QUFDQSx1QkFBUSxTQUFTLENBQVQsTUFBQSxDQUFSLFNBQVEsQ0FBUixFQUFBLGdCQUFBO0FBQ0EsdUJBQU8sVUFBVSxDQUFDLEdBQVgsQ0FBQSxNQUFBLEtBQXlCLG1CQUFLLElBQUwsQ0FBaEMsZUFBQSxFQUFBLGdDQUFBO0FBRUEsdUJBQU8sU0FBUyxDQUFDLEdBQVYsQ0FBQSxNQUFBLEtBQXdCLG1CQUFLLElBQUwsQ0FBL0IsZUFBQSxFQVJBLCtCQVFBLEVBVFUsQzs7QUFjVixFQUFBLENBQUEsR0FBSSxNQUFNLGdCQUFnQixDQUF0QixNQUFNLEVBQVY7QUFFQSxFQUFBLE1BQUEsR0FBUyxjQUFUO0FBQ0EsRUFBQSxPQUFBLEdBQVUsT0FBTyxDQUFQLElBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxDQUFWO0FBQ0EsdUJBQVEsT0FBTyxDQUFQLE1BQUEsQ0FBUixPQUFRLENBQVIsRUFqQkEsYUFpQkEsRUFsQlUsQzs7OztBQXVCVixFQUFBLFdBQUEsR0FBYyxJQUFBLENBQUssQ0FBQyxDQUFOLFVBQUEsRUFBbUIsQ0FBQyxDQUFwQixTQUFBLEVBQUEsT0FBQSxDQUFkO0FBQ0EsdUJBQVEsV0FBVyxDQUFYLE1BQUEsQ0FBUixXQUFRLENBQVIsRUFBQSxpQkFBQTs7QUFDQSxrQkFBQSxLQUFBLENBQ0UsV0FBVyxDQUFDLE9BQVosQ0FBQSxFQUFBLENBREYsTUFDRSxDQURGLEVBQUEsTUFBQSxFQUFBLHlDQUFBOztBQUtBLGtCQUFBLEtBQUEsQ0FDRSxXQUFXLENBQUMsV0FBWixDQUF3QixDQUF4QixFQUFBLEVBQUEsQ0FERixRQUNFLENBREYsRUFFRSxDQUFDLENBQUMsU0FBRixDQUFBLEVBQUEsQ0FGRixRQUVFLENBRkYsRUFBQSxzREFBQTs7QUFNQSxFQUFBLFVBQUEsR0FBYSxXQUFXLENBQVgsRUFBQSxDQW5DYixRQW1DYSxDQUFiLENBcENVLEM7O0FBdUNWLEVBQUEsV0FBQSxHQUFjLFdBQVcsQ0FBWCxJQUFBLENBQUEsUUFBQSxFQUFBLFVBQUEsQ0FBZDtBQUNBLHVCQUFRLE1BQUEsQ0FBRCxXQUFDLENBQUQsS0FBUCxJQUFBLEVBdkNBLGtCQXVDQSxFQXhDVSxDOztBQTJDVixFQUFBLFdBQVcsQ0FBWCxXQUFBLEdBQTBCLENBQUMsQ0FBQyxDQUFGLFNBQUEsQ0FBMUI7QUFDQSx1QkFBUSxNQUFBLENBQUQsV0FBQyxDQUFELEtBQVAsS0FBQSxFQTNDQSxpQ0EyQ0EsRUE1Q1UsQzs7OztBQW1EVixFQUFBLFdBQUEsR0FBYyxJQUFBLENBQUEsQ0FBQSxFQUFBLE9BQUEsQ0FBZDtBQUNBLEVBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxXQUFBLENBQUE7QUFDQSx1QkFBUSxXQUFXLENBQVgsTUFBQSxDQUFSLFdBQVEsQ0FBUixFQUFBLGlCQUFBOztBQUNBLGtCQUFBLEtBQUEsQ0FDRSxXQUFXLENBQUMsT0FBWixDQUFBLEVBQUEsQ0FERixNQUNFLENBREYsRUFBQSxNQUFBLEVBQUEseUNBQUE7O0FBS0Esa0JBQUEsS0FBQSxDQUNFLFdBQVcsQ0FBQyxXQUFaLENBQXdCLENBQXhCLEVBQUEsRUFBQSxDQURGLFFBQ0UsQ0FERixFQUVFLENBQUMsQ0FBQyxTQUFGLENBQUEsRUFBQSxDQUZGLFFBRUUsQ0FGRixFQUFBLHdEQUFBOztBQUtBLGtCQUFBLEtBQUEsQ0FDRSxXQUFXLENBQUMsV0FBWixDQUF3QixDQUF4QixFQUFBLEVBQUEsQ0FERixRQUNFLENBREYsRUFFRSxDQUFDLENBQUMsU0FBRixDQUFBLEVBQUEsQ0FGRixRQUVFLENBRkYsRUFBQSx3REFBQTs7QUFNQSxFQUFBLFVBQUEsR0FBYSxXQUFXLENBQVgsRUFBQSxDQXJFYixRQXFFYSxDQUFiLENBdEVVLEM7O0FBeUVWLEVBQUEsV0FBQSxHQUFjLFdBQVcsQ0FBWCxJQUFBLENBQUEsUUFBQSxFQUFBLFVBQUEsQ0FBZDtTQUNBLHFCQUFRLE1BQUEsQ0FBRCxXQUFDLENBQUQsS0FBUCxJQUFBLEVBQUEsa0JBQUEsQztBQTFFVSxDQUFaOztlQTRFZSxTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCJcbmltcG9ydCB7dGVzdCwgcHJpbnR9IGZyb20gXCJhbWVuXCJcbmltcG9ydCB7Y29uZmlkZW50aWFsfSBmcm9tIFwiLi4vLi4vLi4vc3JjL2luZGV4XCJcbmltcG9ydCBuYWNsIGZyb20gXCJ0d2VldG5hY2xcIlxuXG5TaWduYXR1cmUgPSAtPlxuICB7c2lnbiwgdmVyaWZ5LCBTaWduYXR1cmVLZXlQYWlyLCBQcml2YXRlS2V5LCBQdWJsaWNLZXksIERlY2xhcmF0aW9uLCBNZXNzYWdlLCBjb252ZXJ0fSA9IGNvbmZpZGVudGlhbCgpXG5cbiAgIyBUZXN0IEtleSBQYWlyIEdlbmVyYXRpb25cbiAgQSA9IHtwcml2YXRlS2V5LCBwdWJsaWNLZXl9ID0gYXdhaXQgU2lnbmF0dXJlS2V5UGFpci5jcmVhdGUoKVxuICBhc3NlcnQgKFByaXZhdGVLZXkuaXNUeXBlIHByaXZhdGVLZXkpLCBcImJhZCBwcml2YXRlIGtleVwiXG4gIGFzc2VydCAoUHVibGljS2V5LmlzVHlwZSBwdWJsaWNLZXkpLCBcImJhZCBwdWJsaWMga2V5XCJcbiAgYXNzZXJ0IHByaXZhdGVLZXkua2V5Lmxlbmd0aCA9PSBuYWNsLnNpZ24uc2VjcmV0S2V5TGVuZ3RoLFxuICAgIFwicHJpdmF0ZSBrZXkgaXMgaW1wcm9wZXIgbGVuZ3RoXCJcbiAgYXNzZXJ0IHB1YmxpY0tleS5rZXkubGVuZ3RoID09IG5hY2wuc2lnbi5wdWJsaWNLZXlMZW5ndGgsXG4gICAgXCJwdWJsaWMga2V5IGlzIGltcHJvcGVyIGxlbmd0aFwiXG5cblxuICAjIFRlc3QgRW5jcnlwdCAtIERlY3J5cHQgQ3ljbGVcbiAgQiA9IGF3YWl0IFNpZ25hdHVyZUtleVBhaXIuY3JlYXRlKClcblxuICBzdHJpbmcgPSBcIkhlbGxvIFdvcmxkIVwiXG4gIG1lc3NhZ2UgPSBNZXNzYWdlLmZyb20gXCJ1dGY4XCIsIHN0cmluZ1xuICBhc3NlcnQgKE1lc3NhZ2UuaXNUeXBlIG1lc3NhZ2UpLCBcImJhZCBtZXNzYWdlXCJcblxuICAjIyBDYXNlIDFcbiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgIyBQZXJzb24gQSBzaWducyBhIG1lc3NhZ2UuXG4gIGRlY2xhcmF0aW9uID0gc2lnbiBBLnByaXZhdGVLZXksIEEucHVibGljS2V5LCBtZXNzYWdlXG4gIGFzc2VydCAoRGVjbGFyYXRpb24uaXNUeXBlIGRlY2xhcmF0aW9uKSwgXCJiYWQgZGVjbGFyYXRpb25cIlxuICBhc3NlcnQuZXF1YWwoXG4gICAgZGVjbGFyYXRpb24ubWVzc2FnZS50byBcInV0ZjhcIlxuICAgIHN0cmluZ1xuICAgIFwiYmFkIGRlY2xhcmF0aW9uOiBtZXNzYWdlIG11c3QgYmUgaW50YWN0XCJcbiAgKVxuICBhc3NlcnQuZXF1YWwoXG4gICAgZGVjbGFyYXRpb24uc2lnbmF0b3JpZXNbMF0udG8gXCJiYXNlNjRcIlxuICAgIEEucHVibGljS2V5LnRvIFwiYmFzZTY0XCJcbiAgICBcImJhZCBkZWNsYXJhdGlvbjogc2lnbmF0b3J5J3MgcHVibGljIGtleSBpcyBpbmNvcnJlY3RcIlxuICApXG5cbiAgc2VyaWFsaXplZCA9IGRlY2xhcmF0aW9uLnRvIFwiYmFzZTY0XCJcblxuICAjIFBlcnNvbiBCIHVzZXMgQSdzIHB1YmxpYyBrZXkgdG8gdmVyaWZ5IGFuZCBvcGVuIHRoZSBtZXNzYWdlLlxuICBkZWNsYXJhdGlvbiA9IERlY2xhcmF0aW9uLmZyb20gXCJiYXNlNjRcIiwgc2VyaWFsaXplZFxuICBhc3NlcnQgKHZlcmlmeSBkZWNsYXJhdGlvbikgPT0gdHJ1ZSwgXCJmYWlsZWQgdG8gdmVyaWZ5XCJcblxuICAjIE5lZ2F0aXZlIHRlc3QuXG4gIGRlY2xhcmF0aW9uLnNpZ25hdG9yaWVzID0gW0IucHVibGljS2V5XVxuICBhc3NlcnQgKHZlcmlmeSBkZWNsYXJhdGlvbikgPT0gZmFsc2UsIFwic2lnbmF0dXJlIG5lZ2F0aXZlIHRlc3QgZmFpbHVyZVwiXG5cblxuXG4gICMjIENhc2UgMlxuICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuICAjIFBlcnNvbiBBIGFuZCBCIHNpZ24gYSBtZXNzYWdlIHdpdGgga2V5IHBhaXJzLlxuICBkZWNsYXJhdGlvbiA9IHNpZ24gQSwgbWVzc2FnZVxuICBzaWduIEIsIGRlY2xhcmF0aW9uXG4gIGFzc2VydCAoRGVjbGFyYXRpb24uaXNUeXBlIGRlY2xhcmF0aW9uKSwgXCJiYWQgZGVjbGFyYXRpb25cIlxuICBhc3NlcnQuZXF1YWwoXG4gICAgZGVjbGFyYXRpb24ubWVzc2FnZS50byBcInV0ZjhcIlxuICAgIHN0cmluZ1xuICAgIFwiYmFkIGRlY2xhcmF0aW9uOiBtZXNzYWdlIG11c3QgYmUgaW50YWN0XCJcbiAgKVxuICBhc3NlcnQuZXF1YWwoXG4gICAgZGVjbGFyYXRpb24uc2lnbmF0b3JpZXNbMF0udG8gXCJiYXNlNjRcIlxuICAgIEEucHVibGljS2V5LnRvIFwiYmFzZTY0XCJcbiAgICBcImJhZCBkZWNsYXJhdGlvbjogc2lnbmF0b3J5IEEncyBwdWJsaWMga2V5IGlzIGluY29ycmVjdFwiXG4gIClcbiAgYXNzZXJ0LmVxdWFsKFxuICAgIGRlY2xhcmF0aW9uLnNpZ25hdG9yaWVzWzFdLnRvIFwiYmFzZTY0XCJcbiAgICBCLnB1YmxpY0tleS50byBcImJhc2U2NFwiXG4gICAgXCJiYWQgZGVjbGFyYXRpb246IHNpZ25hdG9yeSBCJ3MgcHVibGljIGtleSBpcyBpbmNvcnJlY3RcIlxuICApXG5cbiAgc2VyaWFsaXplZCA9IGRlY2xhcmF0aW9uLnRvIFwiYmFzZTY0XCJcblxuICAjIFBlcnNvbiBDIHZlcmlmaWVzIHRoZSBtZXNzYWdlIGZyb20gYm90aC5cbiAgZGVjbGFyYXRpb24gPSBEZWNsYXJhdGlvbi5mcm9tIFwiYmFzZTY0XCIsIHNlcmlhbGl6ZWRcbiAgYXNzZXJ0ICh2ZXJpZnkgZGVjbGFyYXRpb24pID09IHRydWUsIFwiZmFpbGVkIHRvIHZlcmlmeVwiXG5cbmV4cG9ydCBkZWZhdWx0IFNpZ25hdHVyZVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/david/Repositories/panda-confidential/test/tests/regular/signature.coffee