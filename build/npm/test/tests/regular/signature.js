"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _index = require("../../../src/index");

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Signature;

Signature = async function () {
  var A, B, Declaration, Message, PrivateKey, PublicKey, SignatureKeyPair, convert, declaration, message, privateKey, publicKey, serialized, sign, string, verify;
  ({
    sign,
    verify,
    SignatureKeyPair,
    PrivateKey,
    PublicKey,
    Declaration,
    Message,
    convert
  } = (0, _index.confidential)()); // Test Key Pair Generation

  A = ({
    privateKey,
    publicKey
  } = await SignatureKeyPair.create());
  (0, _assert.default)(PrivateKey.isType(privateKey), "bad private key");
  (0, _assert.default)(PublicKey.isType(publicKey), "bad public key");
  (0, _assert.default)(privateKey.key.length === _tweetnacl.default.sign.secretKeyLength, "private key is improper length");
  (0, _assert.default)(publicKey.key.length === _tweetnacl.default.sign.publicKeyLength, "public key is improper length"); // Test Encrypt - Decrypt Cycle

  B = await SignatureKeyPair.create();
  string = "Hello World!";
  message = Message.from("utf8", string);
  (0, _assert.default)(Message.isType(message), "bad message"); //# Case 1
  //###############################
  // Person A signs a message.

  declaration = sign(A.privateKey, A.publicKey, message);
  console.log("1", {
    declaration
  });
  (0, _assert.default)(Declaration.isType(declaration), "bad declaration");

  _assert.default.equal(declaration.message.to("utf8"), string, "bad declaration: message must be intact");

  _assert.default.equal(declaration.signatories[0].to("base64"), A.publicKey.to("base64"), "bad declaration: signatory's public key is incorrect");

  serialized = declaration.to("base64"); // Person B uses A's public key to verify and open the message.

  declaration = Declaration.from("base64", serialized);
  (0, _assert.default)(verify(declaration) === true, "failed to verify"); // Negative test.

  declaration.signatories = [B.publicKey];
  (0, _assert.default)(verify(declaration) === false, "signature negative test failure"); //# Case 2
  //###############################
  // Person A and B sign a message with key pairs.

  declaration = sign(A, message);
  console.log("2", {
    declaration
  });
  sign(B, declaration);
  (0, _assert.default)(Declaration.isType(declaration), "bad declaration");

  _assert.default.equal(declaration.message.to("utf8"), string, "bad declaration: message must be intact");

  _assert.default.equal(declaration.signatories[0].to("base64"), A.publicKey.to("base64"), "bad declaration: signatory A's public key is incorrect");

  _assert.default.equal(declaration.signatories[1].to("base64"), B.publicKey.to("base64"), "bad declaration: signatory B's public key is incorrect");

  serialized = declaration.to("base64"); // Person C verifies the message from both.

  declaration = Declaration.from("base64", serialized);
  (0, _assert.default)(verify(declaration) === true, "failed to verify"); //# Case 3
  //###############################
  // Person A signs a message with multiple key pairs.

  declaration = sign([A, B], message);
  console.log("3", {
    declaration
  });

  _assert.default.equal(declaration.message.to("utf8"), string, "bad declaration: message must be intact");

  _assert.default.equal(declaration.signatories[0].to("base64"), A.publicKey.to("base64"), "bad declaration: signatory A's public key is incorrect");

  _assert.default.equal(declaration.signatories[1].to("base64"), B.publicKey.to("base64"), "bad declaration: signatory B's public key is incorrect");

  serialized = declaration.to("base64"); // Person C verifies the message from both.

  declaration = Declaration.from("base64", serialized);
  return (0, _assert.default)(verify(declaration) === true, "failed to verify");
};

var _default = Signature;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-confidential/test/tests/regular/signature.coffee