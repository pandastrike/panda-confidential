"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _index = require("../../../src/index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var symmetric;

symmetric = async function () {
  var Envelope, Plaintext, SymmetricKey, decrypt, encrypt, envelope, key, message, outPlaintext, plaintext, serialized; // Setup for encryption

  ({
    encrypt,
    decrypt,
    SymmetricKey,
    Plaintext,
    Envelope
  } = (0, _index.confidential)()); // Generate symmetric key of correct length that should be saved.

  key = await SymmetricKey.create();
  (0, _assert.default)(SymmetricKey.isType(key), "bad key"); // Person A symmetrically encrypts their data.

  message = "Hello World!";
  plaintext = Plaintext.from("utf8", message);
  (0, _assert.default)(Plaintext.isType(plaintext), "bad plaintext");
  envelope = await encrypt(key, plaintext);
  (0, _assert.default)(Envelope.isType(envelope), "bad envelope"); // Person A serializes their envelope for storage.

  serialized = envelope.to("base64"); // Person A later hydrates the envelope and decrypts.

  envelope = Envelope.from("base64", serialized);
  outPlaintext = await decrypt(key, envelope);
  (0, _assert.default)(Plaintext.isType(outPlaintext), "bad plaintext");

  _assert.default.equal(outPlaintext.to("utf8"), message, "failed to decrypt"); // negative test


  key = await SymmetricKey.create();
  outPlaintext = await decrypt(key, envelope);
  return (0, _assert.default)(outPlaintext.plaintext === null, "decrypt negative test failure");
};

var _default = symmetric;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9SZXBvc2l0b3JpZXMvcGFuZGEtY29uZmlkZW50aWFsL3Rlc3QvdGVzdHMvcmVndWxhci9zeW1tZXRyaWMtZW5jcnlwdGlvbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBREEsSUFBQSxTQUFBOztBQUdBLFNBQUEsR0FBWSxrQkFBQTtBQUVWLE1BQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxZQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxZQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUEsQ0FGVSxDOztBQUVWLEdBQUE7QUFBQSxJQUFBLE9BQUE7QUFBQSxJQUFBLE9BQUE7QUFBQSxJQUFBLFlBQUE7QUFBQSxJQUFBLFNBQUE7QUFBQSxJQUFBO0FBQUEsTUFBQSwwQkFBQSxFQUZVLEM7O0FBS1YsRUFBQSxHQUFBLEdBQU0sTUFBTSxZQUFZLENBQWxCLE1BQU0sRUFBWjtBQUNBLHVCQUFRLFlBQVksQ0FBWixNQUFBLENBQVIsR0FBUSxDQUFSLEVBSkEsU0FJQSxFQU5VLEM7O0FBU1YsRUFBQSxPQUFBLEdBQVUsY0FBVjtBQUNBLEVBQUEsU0FBQSxHQUFZLFNBQVMsQ0FBVCxJQUFBLENBQUEsTUFBQSxFQUFBLE9BQUEsQ0FBWjtBQUNBLHVCQUFRLFNBQVMsQ0FBVCxNQUFBLENBQVIsU0FBUSxDQUFSLEVBQUEsZUFBQTtBQUVBLEVBQUEsUUFBQSxHQUFXLE1BQU0sT0FBQSxDQUFBLEdBQUEsRUFBTixTQUFNLENBQWpCO0FBQ0EsdUJBQVEsUUFBUSxDQUFSLE1BQUEsQ0FBUixRQUFRLENBQVIsRUFaQSxjQVlBLEVBZFUsQzs7QUFpQlYsRUFBQSxVQUFBLEdBQWEsUUFBUSxDQUFSLEVBQUEsQ0FmYixRQWVhLENBQWIsQ0FqQlUsQzs7QUFvQlYsRUFBQSxRQUFBLEdBQVcsUUFBUSxDQUFSLElBQUEsQ0FBQSxRQUFBLEVBQUEsVUFBQSxDQUFYO0FBQ0EsRUFBQSxZQUFBLEdBQWUsTUFBTSxPQUFBLENBQUEsR0FBQSxFQUFOLFFBQU0sQ0FBckI7QUFDQSx1QkFBUSxTQUFTLENBQVQsTUFBQSxDQUFSLFlBQVEsQ0FBUixFQUFBLGVBQUE7O0FBRUEsa0JBQUEsS0FBQSxDQUFjLFlBQVksQ0FBWixFQUFBLENBQWQsTUFBYyxDQUFkLEVBQUEsT0FBQSxFQXRCQSxtQkFzQkEsRUF4QlUsQzs7O0FBMkJWLEVBQUEsR0FBQSxHQUFNLE1BQU0sWUFBWSxDQUFsQixNQUFNLEVBQVo7QUFDQSxFQUFBLFlBQUEsR0FBZSxNQUFNLE9BQUEsQ0FBQSxHQUFBLEVBQU4sUUFBTSxDQUFyQjtTQUNBLHFCQUFPLFlBQVksQ0FBWixTQUFBLEtBQVAsSUFBQSxFQUFBLCtCQUFBLEM7QUE3QlUsQ0FBWjs7ZUErQmUsUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiXG5pbXBvcnQge2NvbmZpZGVudGlhbH0gZnJvbSBcIi4uLy4uLy4uL3NyYy9pbmRleFwiXG5cbnN5bW1ldHJpYyA9IC0+XG4gICMgU2V0dXAgZm9yIGVuY3J5cHRpb25cbiAge2VuY3J5cHQsIGRlY3J5cHQsIFN5bW1ldHJpY0tleSwgUGxhaW50ZXh0LCBFbnZlbG9wZX0gPSBjb25maWRlbnRpYWwoKVxuXG4gICMgR2VuZXJhdGUgc3ltbWV0cmljIGtleSBvZiBjb3JyZWN0IGxlbmd0aCB0aGF0IHNob3VsZCBiZSBzYXZlZC5cbiAga2V5ID0gYXdhaXQgU3ltbWV0cmljS2V5LmNyZWF0ZSgpXG4gIGFzc2VydCAoU3ltbWV0cmljS2V5LmlzVHlwZSBrZXkpLCBcImJhZCBrZXlcIlxuXG4gICMgUGVyc29uIEEgc3ltbWV0cmljYWxseSBlbmNyeXB0cyB0aGVpciBkYXRhLlxuICBtZXNzYWdlID0gXCJIZWxsbyBXb3JsZCFcIlxuICBwbGFpbnRleHQgPSBQbGFpbnRleHQuZnJvbSBcInV0ZjhcIiwgbWVzc2FnZVxuICBhc3NlcnQgKFBsYWludGV4dC5pc1R5cGUgcGxhaW50ZXh0KSwgXCJiYWQgcGxhaW50ZXh0XCJcblxuICBlbnZlbG9wZSA9IGF3YWl0IGVuY3J5cHQga2V5LCBwbGFpbnRleHRcbiAgYXNzZXJ0IChFbnZlbG9wZS5pc1R5cGUgZW52ZWxvcGUpLCBcImJhZCBlbnZlbG9wZVwiXG5cbiAgIyBQZXJzb24gQSBzZXJpYWxpemVzIHRoZWlyIGVudmVsb3BlIGZvciBzdG9yYWdlLlxuICBzZXJpYWxpemVkID0gZW52ZWxvcGUudG8gXCJiYXNlNjRcIlxuXG4gICMgUGVyc29uIEEgbGF0ZXIgaHlkcmF0ZXMgdGhlIGVudmVsb3BlIGFuZCBkZWNyeXB0cy5cbiAgZW52ZWxvcGUgPSBFbnZlbG9wZS5mcm9tIFwiYmFzZTY0XCIsIHNlcmlhbGl6ZWRcbiAgb3V0UGxhaW50ZXh0ID0gYXdhaXQgZGVjcnlwdCBrZXksIGVudmVsb3BlXG4gIGFzc2VydCAoUGxhaW50ZXh0LmlzVHlwZSBvdXRQbGFpbnRleHQpLCBcImJhZCBwbGFpbnRleHRcIlxuXG4gIGFzc2VydC5lcXVhbCAob3V0UGxhaW50ZXh0LnRvIFwidXRmOFwiKSwgbWVzc2FnZSwgXCJmYWlsZWQgdG8gZGVjcnlwdFwiXG5cbiAgIyBuZWdhdGl2ZSB0ZXN0XG4gIGtleSA9IGF3YWl0IFN5bW1ldHJpY0tleS5jcmVhdGUoKVxuICBvdXRQbGFpbnRleHQgPSBhd2FpdCBkZWNyeXB0IGtleSwgZW52ZWxvcGVcbiAgYXNzZXJ0IG91dFBsYWludGV4dC5wbGFpbnRleHQgPT0gbnVsbCwgXCJkZWNyeXB0IG5lZ2F0aXZlIHRlc3QgZmFpbHVyZVwiXG5cbmV4cG9ydCBkZWZhdWx0IHN5bW1ldHJpY1xuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/david/Repositories/panda-confidential/test/tests/regular/symmetric-encryption.coffee