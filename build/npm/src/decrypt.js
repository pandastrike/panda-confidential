"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

var _pandaParchment = require("panda-parchment");

var _pandaGenerics = require("panda-generics");

var _utils = require("./utils");

var _keys = require("./keys");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var decrypt;
// Define a multimethod for export.
decrypt = _pandaGenerics.Method.create(); // Symmetric Decryption

_pandaGenerics.Method.define(decrypt, _keys.isSymmetricKey, _utils.isData, _pandaParchment.isString, function ({
  key
}, blob, encoding) {
  var ciphertext, nonce;
  ({
    ciphertext,
    nonce
  } = JSON.parse((0, _utils.encode)("utf8", blob)));
  ciphertext = (0, _utils.decode)("base64", ciphertext);
  nonce = (0, _utils.decode)("base64", nonce);
  return (0, _utils.encode)(encoding, _tweetnacl.default.secretbox.open(ciphertext, nonce, key));
});

_pandaGenerics.Method.define(decrypt, _keys.isSymmetricKey, _utils.isData, function (key, blob) {
  return decrypt(key, blob, "utf8");
});

_pandaGenerics.Method.define(decrypt, _keys.isSymmetricKey, _pandaParchment.isString, _pandaParchment.isString, function (key, blob, encoding) {
  return decrypt(key, (0, _utils.decode)("base64", blob), encoding);
});

_pandaGenerics.Method.define(decrypt, _keys.isSymmetricKey, _pandaParchment.isString, function (key, blob) {
  return decrypt(key, (0, _utils.decode)("base64", blob), "utf8");
}); // Asymmetric Decryption via shared key.


_pandaGenerics.Method.define(decrypt, _keys.isSharedKey, _utils.isData, _pandaParchment.isString, function ({
  key
}, blob, encoding) {
  var ciphertext, nonce;
  ({
    ciphertext,
    nonce
  } = JSON.parse((0, _utils.encode)("utf8", blob)));
  ciphertext = (0, _utils.decode)("base64", ciphertext);
  nonce = (0, _utils.decode)("base64", nonce);
  return (0, _utils.encode)(encoding, _tweetnacl.default.box.open.after(ciphertext, nonce, key));
});

_pandaGenerics.Method.define(decrypt, _keys.isSharedKey, _utils.isData, function (key, blob) {
  return decrypt(key, blob, "utf8");
});

_pandaGenerics.Method.define(decrypt, _keys.isSharedKey, _pandaParchment.isString, _pandaParchment.isString, function (key, blob, encoding) {
  return decrypt(key, (0, _utils.decode)("base64", blob), encoding);
});

_pandaGenerics.Method.define(decrypt, _keys.isSharedKey, _pandaParchment.isString, function (key, blob) {
  return decrypt(key, (0, _utils.decode)("base64", blob), "utf8");
});

var _default = decrypt;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,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QUEsT0FBQSxFQUFBLGlCQUFBLEVBQUEsd0JBQUEsRUFDRSxVQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7U0FBZSxPQUFBLENBQUEsR0FBQSxFQUFhLG1CQUFBLFFBQUEsRUFBYixJQUFhLENBQWIsRUFBQSxNQUFBLEM7QUFEakIsQ0FBQTs7ZUFHZSxPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5hY2wgZnJvbSBcInR3ZWV0bmFjbFwiXG5pbXBvcnQge2lzU3RyaW5nLCBpc09iamVjdH0gZnJvbSBcInBhbmRhLXBhcmNobWVudFwiXG5pbXBvcnQge01ldGhvZH0gZnJvbSBcInBhbmRhLWdlbmVyaWNzXCJcblxuaW1wb3J0IHtkZWNvZGUsIGVuY29kZSwgaXNEYXRhfSBmcm9tIFwiLi91dGlsc1wiXG5pbXBvcnQge2lzU3ltbWV0cmljS2V5LCBpc1NoYXJlZEtleX0gZnJvbSBcIi4va2V5c1wiXG5cbiMgRGVmaW5lIGEgbXVsdGltZXRob2QgZm9yIGV4cG9ydC5cbmRlY3J5cHQgPSBNZXRob2QuY3JlYXRlKClcblxuIyBTeW1tZXRyaWMgRGVjcnlwdGlvblxuTWV0aG9kLmRlZmluZSBkZWNyeXB0LCBpc1N5bW1ldHJpY0tleSwgaXNEYXRhLCBpc1N0cmluZyxcbiAgKHtrZXl9LCBibG9iLCBlbmNvZGluZykgLT5cbiAgICB7Y2lwaGVydGV4dCwgbm9uY2V9ID0gSlNPTi5wYXJzZSBlbmNvZGUgXCJ1dGY4XCIsIGJsb2JcbiAgICBjaXBoZXJ0ZXh0ID0gZGVjb2RlIFwiYmFzZTY0XCIsIGNpcGhlcnRleHRcbiAgICBub25jZSA9IGRlY29kZSBcImJhc2U2NFwiLCBub25jZVxuICAgIGVuY29kZSBlbmNvZGluZywgbmFjbC5zZWNyZXRib3gub3BlbiBjaXBoZXJ0ZXh0LCBub25jZSwga2V5XG5NZXRob2QuZGVmaW5lIGRlY3J5cHQsIGlzU3ltbWV0cmljS2V5LCBpc0RhdGEsXG4gIChrZXksIGJsb2IpIC0+IGRlY3J5cHQga2V5LCBibG9iLCBcInV0ZjhcIlxuTWV0aG9kLmRlZmluZSBkZWNyeXB0LCBpc1N5bW1ldHJpY0tleSwgaXNTdHJpbmcsIGlzU3RyaW5nLFxuICAoa2V5LCBibG9iLCBlbmNvZGluZykgLT4gZGVjcnlwdCBrZXksIGRlY29kZShcImJhc2U2NFwiLCBibG9iKSwgZW5jb2Rpbmdcbk1ldGhvZC5kZWZpbmUgZGVjcnlwdCwgaXNTeW1tZXRyaWNLZXksIGlzU3RyaW5nLFxuICAoa2V5LCBibG9iKSAtPiBkZWNyeXB0IGtleSwgZGVjb2RlKFwiYmFzZTY0XCIsIGJsb2IpLCBcInV0ZjhcIlxuXG4jIEFzeW1tZXRyaWMgRGVjcnlwdGlvbiB2aWEgc2hhcmVkIGtleS5cbk1ldGhvZC5kZWZpbmUgZGVjcnlwdCwgaXNTaGFyZWRLZXksIGlzRGF0YSwgaXNTdHJpbmcsXG4gICh7a2V5fSwgYmxvYiwgZW5jb2RpbmcpIC0+XG4gICAge2NpcGhlcnRleHQsIG5vbmNlfSA9IEpTT04ucGFyc2UgZW5jb2RlIFwidXRmOFwiLCBibG9iXG4gICAgY2lwaGVydGV4dCA9IGRlY29kZSBcImJhc2U2NFwiLCBjaXBoZXJ0ZXh0XG4gICAgbm9uY2UgPSBkZWNvZGUgXCJiYXNlNjRcIiwgbm9uY2VcbiAgICBlbmNvZGUgZW5jb2RpbmcsIG5hY2wuYm94Lm9wZW4uYWZ0ZXIgY2lwaGVydGV4dCwgbm9uY2UsIGtleVxuTWV0aG9kLmRlZmluZSBkZWNyeXB0LCBpc1NoYXJlZEtleSwgaXNEYXRhLFxuICAoa2V5LCBibG9iKSAtPiBkZWNyeXB0IGtleSwgYmxvYiwgXCJ1dGY4XCJcbk1ldGhvZC5kZWZpbmUgZGVjcnlwdCwgaXNTaGFyZWRLZXksIGlzU3RyaW5nLCBpc1N0cmluZyxcbiAgKGtleSwgYmxvYiwgZW5jb2RpbmcpIC0+IGRlY3J5cHQga2V5LCBkZWNvZGUoXCJiYXNlNjRcIiwgYmxvYiksIGVuY29kaW5nXG5NZXRob2QuZGVmaW5lIGRlY3J5cHQsIGlzU2hhcmVkS2V5LCBpc1N0cmluZyxcbiAgKGtleSwgYmxvYikgLT4gZGVjcnlwdCBrZXksIGRlY29kZShcImJhc2U2NFwiLCBibG9iKSwgXCJ1dGY4XCJcblxuZXhwb3J0IGRlZmF1bHQgZGVjcnlwdFxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=decrypt.coffee