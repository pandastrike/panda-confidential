"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

var _pandaParchment = require("panda-parchment");

var _pandaGenerics = require("panda-generics");

var _utils = require("./utils");

var _keys = require("./keys");

var _keyPairs = require("./key-pairs");

var _signedMessage = require("./signed-message");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sign;
// Define a multimethod.
sign = _pandaGenerics.Method.create(); // Signing a plain message.

_pandaGenerics.Method.define(sign, _keys.isPrivateKey, _keys.isPublicKey, _utils.isData, _pandaParchment.isString, function ({
  key: privateKey
}, {
  key: publicKey
}, message, encoding) {
  return (0, _signedMessage.signedMessage)({
    message: message,
    encoding: encoding,
    publicKeys: [publicKey],
    signatures: [_tweetnacl.default.sign.detached(message, privateKey)]
  });
});

_pandaGenerics.Method.define(sign, _keys.isPrivateKey, _keys.isPublicKey, _utils.isData, function (privateKey, publicKey, message) {
  return sign(privateKey, publicKey, message, "buffer");
});

_pandaGenerics.Method.define(sign, _keys.isPrivateKey, _keys.isPublicKey, _pandaParchment.isString, _pandaParchment.isString, function (privateKey, publicKey, message, encoding) {
  return sign(privateKey, publicKey, (0, _utils.decode)(encoding, message), encoding);
});

_pandaGenerics.Method.define(sign, _keys.isPrivateKey, _keys.isPublicKey, _pandaParchment.isString, function (privateKey, publicKey, message) {
  return sign(privateKey, publicKey, (0, _utils.decode)("utf8", message), "utf8");
}); // Signing a plain message with whole Key Pair.


_pandaGenerics.Method.define(sign, _keyPairs.isSignatureKeyPair, _utils.isData, function ({
  privateKey,
  publicKey
}, message) {
  return sign(privateKey, publicKey, message, "buffer");
});

_pandaGenerics.Method.define(sign, _keyPairs.isSignatureKeyPair, _pandaParchment.isString, _pandaParchment.isString, function ({
  privateKey,
  publicKey
}, message, encoding) {
  return sign(privateKey, publicKey, (0, _utils.decode)(encoding, message), encoding);
});

_pandaGenerics.Method.define(sign, _keyPairs.isSignatureKeyPair, _pandaParchment.isString, function ({
  privateKey,
  publicKey
}, message) {
  return sign(privateKey, publicKey, (0, _utils.decode)("utf8", message), "utf8");
}); // Signing SignedMessage class (previously signed message).


_pandaGenerics.Method.define(sign, _keys.isPrivateKey, _keys.isPublicKey, _signedMessage.isSignedMessage, function ({
  key: privateKey
}, {
  key: publicKey
}, sig) {
  sig.publicKeys.push(publicKey);
  sig.signatures.push(_tweetnacl.default.sign.detached(sig.message, privateKey));
  return sig;
});

_pandaGenerics.Method.define(sign, _keyPairs.isSignatureKeyPair, _signedMessage.isSignedMessage, function ({
  privateKey,
  publicKey
}, sig) {
  return sign(privateKey, publicKey, sig);
});

var _default = sign;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,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QUwsQ0FBbkIsRUFBQSxHQUFBLEVBQUE7QUFDRSxFQUFBLEdBQUcsQ0FBQyxVQUFKLENBQUEsSUFBQSxDQUFBLFNBQUE7QUFDQSxFQUFBLEdBQUcsQ0FBQyxVQUFKLENBQUEsSUFBQSxDQUFvQixtQkFBSyxJQUFMLENBQUEsUUFBQSxDQUFtQixHQUFHLENBQXRCLE9BQUEsRUFBcEIsVUFBb0IsQ0FBcEI7U0FDQSxHO0FBSkosQ0FBQTs7QUFNQSxzQkFBQSxNQUFBLENBQUEsSUFBQSxFQUFBLDRCQUFBLEVBQUEsOEJBQUEsRUFDRSxVQUFDO0FBQUEsRUFBQSxVQUFBO0FBQUQsRUFBQTtBQUFDLENBQUQsRUFBQSxHQUFBLEVBQUE7U0FDRSxJQUFBLENBQUEsVUFBQSxFQUFBLFNBQUEsRUFBQSxHQUFBLEM7QUFGSixDQUFBOztlQUtlLEkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmFjbCBmcm9tIFwidHdlZXRuYWNsXCJcbmltcG9ydCB7aXNTdHJpbmd9IGZyb20gXCJwYW5kYS1wYXJjaG1lbnRcIlxuaW1wb3J0IHtNZXRob2R9IGZyb20gXCJwYW5kYS1nZW5lcmljc1wiXG5cbmltcG9ydCB7aXNEYXRhLCBlbmNvZGUsIGRlY29kZX0gZnJvbSBcIi4vdXRpbHNcIlxuaW1wb3J0IHtpc1ByaXZhdGVLZXksIGlzUHVibGljS2V5fSBmcm9tIFwiLi9rZXlzXCJcbmltcG9ydCB7aXNTaWduYXR1cmVLZXlQYWlyfSBmcm9tIFwiLi9rZXktcGFpcnNcIlxuaW1wb3J0IHtpc1NpZ25lZE1lc3NhZ2UsIHNpZ25lZE1lc3NhZ2V9IGZyb20gXCIuL3NpZ25lZC1tZXNzYWdlXCJcblxuIyBEZWZpbmUgYSBtdWx0aW1ldGhvZC5cbnNpZ24gPSBNZXRob2QuY3JlYXRlKClcblxuIyBTaWduaW5nIGEgcGxhaW4gbWVzc2FnZS5cbk1ldGhvZC5kZWZpbmUgc2lnbiwgaXNQcml2YXRlS2V5LCBpc1B1YmxpY0tleSwgaXNEYXRhLCBpc1N0cmluZyxcbiAgKHtrZXk6cHJpdmF0ZUtleX0sIHtrZXk6cHVibGljS2V5fSwgbWVzc2FnZSwgZW5jb2RpbmcpIC0+XG4gICAgICBzaWduZWRNZXNzYWdlXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nXG4gICAgICAgIHB1YmxpY0tleXM6IFtwdWJsaWNLZXldXG4gICAgICAgIHNpZ25hdHVyZXM6IFtuYWNsLnNpZ24uZGV0YWNoZWQgbWVzc2FnZSwgcHJpdmF0ZUtleV1cblxuTWV0aG9kLmRlZmluZSBzaWduLCBpc1ByaXZhdGVLZXksIGlzUHVibGljS2V5LCBpc0RhdGEsXG4gIChwcml2YXRlS2V5LCBwdWJsaWNLZXksIG1lc3NhZ2UpIC0+XG4gICAgc2lnbiBwcml2YXRlS2V5LCBwdWJsaWNLZXksIG1lc3NhZ2UsIFwiYnVmZmVyXCJcbk1ldGhvZC5kZWZpbmUgc2lnbiwgaXNQcml2YXRlS2V5LCBpc1B1YmxpY0tleSwgaXNTdHJpbmcsIGlzU3RyaW5nLFxuICAocHJpdmF0ZUtleSwgcHVibGljS2V5LCBtZXNzYWdlLCBlbmNvZGluZykgLT5cbiAgICBzaWduIHByaXZhdGVLZXksIHB1YmxpY0tleSwgZGVjb2RlKGVuY29kaW5nLCBtZXNzYWdlKSwgZW5jb2Rpbmdcbk1ldGhvZC5kZWZpbmUgc2lnbiwgaXNQcml2YXRlS2V5LCBpc1B1YmxpY0tleSwgaXNTdHJpbmcsXG4gIChwcml2YXRlS2V5LCBwdWJsaWNLZXksIG1lc3NhZ2UpIC0+XG4gICAgc2lnbiBwcml2YXRlS2V5LCBwdWJsaWNLZXksIGRlY29kZShcInV0ZjhcIiwgbWVzc2FnZSksIFwidXRmOFwiXG5cbiMgU2lnbmluZyBhIHBsYWluIG1lc3NhZ2Ugd2l0aCB3aG9sZSBLZXkgUGFpci5cbk1ldGhvZC5kZWZpbmUgc2lnbiwgaXNTaWduYXR1cmVLZXlQYWlyLCBpc0RhdGEsXG4gICh7cHJpdmF0ZUtleSwgcHVibGljS2V5fSwgbWVzc2FnZSkgLT5cbiAgICBzaWduIHByaXZhdGVLZXksIHB1YmxpY0tleSwgbWVzc2FnZSwgXCJidWZmZXJcIlxuTWV0aG9kLmRlZmluZSBzaWduLCBpc1NpZ25hdHVyZUtleVBhaXIsIGlzU3RyaW5nLCBpc1N0cmluZyxcbiAgKHtwcml2YXRlS2V5LCBwdWJsaWNLZXl9LCBtZXNzYWdlLCBlbmNvZGluZykgLT5cbiAgICBzaWduIHByaXZhdGVLZXksIHB1YmxpY0tleSwgZGVjb2RlKGVuY29kaW5nLCBtZXNzYWdlKSwgZW5jb2Rpbmdcbk1ldGhvZC5kZWZpbmUgc2lnbiwgaXNTaWduYXR1cmVLZXlQYWlyLCBpc1N0cmluZyxcbiAgKHtwcml2YXRlS2V5LCBwdWJsaWNLZXl9LCBtZXNzYWdlKSAtPlxuICAgIHNpZ24gcHJpdmF0ZUtleSwgcHVibGljS2V5LCBkZWNvZGUoXCJ1dGY4XCIsIG1lc3NhZ2UpLCBcInV0ZjhcIlxuXG4jIFNpZ25pbmcgU2lnbmVkTWVzc2FnZSBjbGFzcyAocHJldmlvdXNseSBzaWduZWQgbWVzc2FnZSkuXG5NZXRob2QuZGVmaW5lIHNpZ24sIGlzUHJpdmF0ZUtleSwgaXNQdWJsaWNLZXksIGlzU2lnbmVkTWVzc2FnZSxcbiAgKHtrZXk6cHJpdmF0ZUtleX0sIHtrZXk6cHVibGljS2V5fSwgc2lnKSAtPlxuICAgIHNpZy5wdWJsaWNLZXlzLnB1c2ggcHVibGljS2V5XG4gICAgc2lnLnNpZ25hdHVyZXMucHVzaCBuYWNsLnNpZ24uZGV0YWNoZWQgc2lnLm1lc3NhZ2UsIHByaXZhdGVLZXlcbiAgICBzaWdcblxuTWV0aG9kLmRlZmluZSBzaWduLCBpc1NpZ25hdHVyZUtleVBhaXIsIGlzU2lnbmVkTWVzc2FnZSxcbiAgKHtwcml2YXRlS2V5LCBwdWJsaWNLZXl9LCBzaWcpIC0+XG4gICAgc2lnbiBwcml2YXRlS2V5LCBwdWJsaWNLZXksIHNpZ1xuXG5cbmV4cG9ydCBkZWZhdWx0IHNpZ25cbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=sign.coffee