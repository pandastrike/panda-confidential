::
    fn
      name: "encrypt"
      $in:
        key:
          $t: alt [
            k "key.Symmetric"
            k "key.Asymmetric"
          ]
          $d: "Key to be used in the encryption operation."
        nonce:
          $t: bytes
          $o: true
          $d: """
            A value combined with the plaintext before encryption. A
            #{k 'nonceLength'} random nonce is generated if not supplied.
          """
        plaintext:
          $t: alt [
            k "string"
            bytes
          ]
      $out:
        envelope:
          $t: k "Envelope"
          $d: """
            Object with properties `ciphertext` and `nonce`. Suitable for use with #{k 'decrypt'}.
          """
::

When given a :: $ln 'symmetric key' ::, :: $k 'encrypt' :: uses :: $ln 'symmetric encryption' ::. When given a :: $ln 'shared key' ::, :: $k 'encrypt' :: uses authenticated, :: $ln 'asymmetric encryption' ::.

**Warning:** Key pairs for signing [do not work for encryption](./usage.md#why-signing-key-pairs-are-different).

##### Example: Symmetric Encryption

```coffeescript
import {confidential} from "panda-confidential"
{encrypt} = confidential()
import {keyLookup, write} from "my-library"

do ->
  alice = keyLookup "Alice/private"
  envelope = await encrypt alice, "Hello, World!"
  # serialize as needed with convert
  write "greeting", convert to: "safe-base64", envelope
```

**Warning:** Private keys should only be accessible to their owners.

##### Example: Asymmetric Encryption

```coffeescript
import {confidential} from "panda-confidential"
{key, encrypt} = confidential()
import {keyLookup} from "my-library"

do ->
  alice = keyLookup "Alice/private"
  bob = keyLookup "Bob/public"
  fromAliceToBob = key.shared alice, bob
  envelope = await encrypt fromAliceToBob, "Hello, World!"
  send "Bob", convert to: "safe-base64", envelope
```

**Warning:** Private keys should only be accessible to their owners.
