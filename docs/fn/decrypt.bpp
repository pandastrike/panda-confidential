::
    fn
      name: "decrypt"
      $in:
        key:
          $t: alt [
            k "key.Symmetric"
            k "key.Asymmetric"
          ]
          $d: "Key to be used in the encryption operation."
        envelope:
          $t: k "Envelope"
          $d: """
            Object with properties #{k 'ciphertext'} and #{ 'nonce'}. As returned by #{k 'encrypt'}.
          """
      $out:
        plaintext:
          $t: k "Uint8Array"
          $d: "The decrypted ciphertext."
::

When given a :: $ln 'symmetric key' ::, :: $k 'decrypt' :: uses :: $ln 'symmetric decryption' ::. When given a :: $ln 'shared key' ::, :: $k 'decrypt' :: uses authenticated, :: $ln 'asymmetric decryption' ::.

##### Example: Symmetric Decryption

```coffeescript
import {confidential} from "panda-confidential"
{decrypt} = confidential()
import {keyLookup, read} from "my-library"

do ->
  alice = keyLookup "Alice/private"
  serialized = read "greeting"
  envelope = convert from: "safe-base64", to: "object", serialized
  plaintext = await decrypt alice, envelope
```

##### Example: Asymmetric Decryption

```coffeescript
import {confidential} from "panda-confidential"
{key, decrypt} = confidential()
import {keyLookup, receive} from "my-library"

do ->
  alice = keyLookup "Alice/public"
  bob = keyLookup "Bob/private"
  toBobFromAlice = key.shared alice, bob
  serialized = receive "Bob"
  envelope = convert from: "safe-base64", to: "object", serialized
  plaintext = await decrypt toBobFromAlice, envelope
```
