::
$$ fnH "sign"

$$ sig
  name: "sign"
  $in:
    "public-key": $t: k "key.Public"
    "private-key": $t: k "key.Private"
    data:
      $t: alt [ bytes, (k "Declaration") ]
  $out:
    declaration:
      $t: k "Declaration"

$$ para

$$ sig
  name: "sign"
  $in:
    "key-pair":
      $t: k "keyPair.Signature"
    data:
      $t: alt [ bytes, (k "Declaration") ]
  $out:
    declaration: $t: k "Declaration"

$$ para

$$ sig
  name: "sign"
  $in:
    "private-key": $t: k "key.Private"
    "public-key": $t: k "key.Public"
    data:
      $t: alt [ bytes, (k "Declaration") ]
  $out:
    declaration: $t: k "Declaration"

$$ para

$$ args
  $in:
    "key-pair":
      $t: k "keyPair.Signature"
      $d: "The public and private keys with which to sign _data_."
    "public-key":
      $t: k "key.Public"
      $d: "The public key of the person wishing to sign _data_."
    "private-key":
      $t: k "key.Private"
      $d: "The private key of the person wishing to sign _data_."
    data:
      $t: alt [
          bytes
          (k "Declaration")
        ]
      $d: "Data to be signed."
  $out:
    declaration:
      $t: k "Declaration"
      $d: """
        Object with properties `data`, `signatures`, and `signatories`. Suitable for use with #{k 'verify'}.
      """
::
Sign _data_ with _private-key_ or the private key of _key-pair_.

**Warning:** Key pairs for signing do not work for encryption.

##### Example: Single Signature

```coffeescript
import {confidential} from "panda-confidential"
{sign} = confidential()

import {send, keyPairLookup} from "my-library"

do ->
  alice = keyPairLookup "Alice/signature"
  greeting = sign alice, "Hello, World!"

  # encode the signed data object itself
  send "Bob", convert to: "safe-base64", declaration
```

##### Example: Multiple Signatures

`sign` can take a :: k 'Declaration' :: instance to allow multiple signatures. The `signatures` property contains a list of signatures. The `signatories` property contains a list of the corresponding public keys.

```coffeescript
import assert from "assert"
import {confidential} from "panda-confidential"
{sign, declaration} = confidential()
import {receive, keyPairLookup} from "my-library"

do ->
  # convert JSON to declaration
  greeting = declaration convert from: "json", receive "Bob"

  # add Bob's signature
  bob = keyPairLookup "Bob/signature"
  greeting = sign bob, greeting

  assert.equal greeting.signatures.length, 2
  assert.equal greeting.signatories.length, 2
```
