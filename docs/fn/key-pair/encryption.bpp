## keyPair
panda-confidential uses a key type system to allow the generics -- `encrypt`, `decrypt`, `sign`, and `verify` -- to select the appropriate action. This type system is implemented in [key and key-pair classes](#classes).

Key-pairs are sets of related keys used for public key cryptography and are generated together. The two main types of key-pairs are for encryption and signing, and they are incompatible with each other. The following functions wrap TweetNaCl.js generation methods while making it clear how the keys should be used.

### keyPair.encryption
_**keyPair.encryption** &rarr; EncryptionKeyPair_

- Returns _[`keyPair.Encryption`][class-keypair-Encryption]_: This returns an instance of [`keyPair.Encryption`][class-keypair-Encryption]

This function generates a key-pair suitable for asymmetric encryption. It uses the panda-confidential instance of [randomBytes][randombytes] to generate the values.

___The private keys you generate for encryption are _not_ suitable for signing.___

##### Example
```coffeescript
import {confidential} from "panda-confidential"
{keyPair, key, encrypt} = confidential()

do ->
  # Generate a key-pair suitable for encryption for person A.
  {privateKey, publicKey} = await keyPair.encryption()

  # Lookup the public key for person B.
  B_public = lookupPublicKey()

  # Now you may encrypt a data for person B.
  myKey = key.shared privateKey, B_public
  data = "Hello World!"
  ciphertext = encrypt mykey, data
```
